---
layout: post
title:      "Rails and Javascript Project"
date:       2019-07-24 20:36:05 +0000
permalink:  rails_and_javascript_project
---


This project took longer than I wanted to and was definitely more challenging than I thought it would be. I didn't find the project difficult in terms of the logic of the code. It was a different kind of challenge.

It has been some time since I looked at my Rails project. The section after Rails is Javascript, then Rails and Javascript. Before I started my project I finished an online course on Data Structures and Algorithms with Javascript. I wanted to finish before starting my project so that I can spend an hour a day solving programming problems. This is for me to grow as a programmer and become more proficient at solving them. After finishing the course I started to work on my project, but it had been so long since I looked at the code. It felt foreign to me and often I kept thinking to myself, "How did I write this?". 

The project wasn't difficult, but it offered a different kind of challenge. When solving a coding problem your logic has to make sense. You need an algorithm to solve it (let's ignore the time and space complexity here and go back to nested loops). In this project, I needed to use some good old Javascript to make some AJAX calls and make the page dynamic. If you think about it, there isn't much logic to making an AJAX call. What I mean by that is that an AJAX call is just an AJAX  call. There is a sort of skeleton you can use. The question is what are you going to do with the data you get back (assuming your call is successful). 

Again, I am not saying this was easy, I am saying it's a different kind of challange and requires a different kind of thinking. Setting up and event listener isn't difficult. The question is whether or not you set up the event succesfully and set up the right event where you wanted it. Adding Javascript followed this flow, at least for me. Set up an event with an alert, try to trigger the alert, bang my head against my desk wondering why the event won't trigger, find out it was a stupid mistake, trigger the event, and finally bang my head against my desk for not figuring it out sooner. The code isn't difficult and easy to look up, but you sort of need to mold it into the right shape for your use. After the event is working the next step is the AJAX call which involved setting up an alert to see the call was successful, making sure my controller recieved the call, and making sure I received the right data back. (At one point I was getting back undefined from my AJAX calls and started to wonder if maybe mt browser was fighting with me). 

I can go on longer and put code examples, but we've seen these Javascript codes before and are not difficult to look up. The point I wanted to make was that this project was a different kind of challenge. Programming is hard, we all know that, but there is one thing I noticed in terms of Web. This isn't just programming, it's also like sculpting or designing. What I mean is that two different projects can have AJAX calls, but the context is different. What's going on in the back end? What are you doing with the data? Is it being added to the DOM? Are you perhaps sending an email when something is triggered? These are things you need to think of when doing something Web related. If we were perhaps talking a code problem, my solution can be vastly different from yours, but the context is the same. We need an algorithm to solve the problem, and you can objectively analyze the code and see which one is better. This is just my opinion of course but hopefully you got something out of this.
